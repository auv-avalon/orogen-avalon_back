name "avalon_back"
version "0.1"

using_library "opencv" #otherwise linking will fail

#using_task_library "motion_estimation"
#using_task_library "ekf_slam"
#using_task_library "sonar_blueview"

using_task_library "gold_piezo"
using_task_library "xsens_imu"
using_task_library "fog_kvh"
using_task_library 'state_estimator'
using_task_library 'orientation_estimator'
using_task_library "sonar_tritech"
using_task_library "avalon_control"
using_task_library "depth_reader"

using_task_library "asv_detector"
using_task_library "canbus"
using_task_library "hbridge"
using_task_library "controldev"
using_task_library "sysmon"
using_task_library "modem_can"
using_task_library "raw_control_command_converter"

using_task_library "wall_servoing"
using_task_library "sonar_feature_estimator"
using_task_library "auv_rel_pos_controller"
using_task_library "rear_sonar_distance_estimator"
#using_task_library "uwv_dynamic_model" #baut nicht 09.08.2012
using_task_library "battery_management"
using_task_library "uw_particle_localization"
using_task_library "auv_waypoint_navigator"
using_task_library "pingersearch"
using_task_library "audio_reader"

using_task_library "taskmon"
using_task_library "auv_control"

deployment 'avalon_back_base_control' do
    task("hbridge", "hbridge::Task").
	periodic(0.001).
        realtime.
        priority(90)

    task("depth","depth_reader::Task")
    task("depth_orientation_fusion","depth_reader::depth_and_orientation_fusion")
    task("piezo","gold_piezo::Task")

    task("can", "canbus::Task").
    	periodic(0.001).
	realtime.
	priority(92)

    task("motion_control",    "avalon_control::MotionControlTask")
    task("motion_feedback",   "avalon_control::MotionFeedbackTask")
    
    task("force_torque_controller", "auv_control::AUVForceTorqueController")
    task("aligned_velocity_controller", "auv_control::AUVAlignedVelocityController")
    task("aligned_controller", "auv_control::AUVAlignedController")
    task("world_controller", "auv_control::AUVWorldController")
    task("relative_controller", "auv_control::AUVRelativeController")

    #task("motion_estimation", "motion_estimation::Task")

    add_default_logger.
    	periodic(0.01)
end

simple_deployment("sonar_distance_estimator", "rear_sonar_distance_estimator::Task")
# simple_deployment("ekf_slam","ekf_slam::Task")
simple_deployment('state_estimator', 'state_estimator::Task').
    realtime.
    priority(50)

simple_deployment('orientation_estimator', 'orientation_estimator::BaseEstimator').
    realtime.
    priority(50)

simple_deployment('ikf_orientation_estimator', 'orientation_estimator::IKFEstimator').
    realtime.
    priority(50)

simple_deployment('xsens','xsens_imu::Task').
    realtime.
    priority(75)

simple_deployment("fog","fog_kvh::Dsp3000Task").
    realtime.
    priority(75)

#simple_deployment("pipeline_tracker","pipline_tracker::Task")

#simple_deployment("sonar_profiling","sonar_tritech::Profiling")
simple_deployment("echosounder",          "sonar_tritech::Echosounder")
simple_deployment("sonar",          "sonar_tritech::Micron")
simple_deployment("sonar_rear",     "sonar_tritech::Micron")
#simple_deployment("sonar_profiling_micron",     "sonar_tritech::Micron")

# Never make it periodic, otherwise it does not work correctly
simple_deployment("controldev", "controldev::Remote")

simple_deployment("sysmon","sysmon::Task")
simple_deployment("modem","modem_can::Task").periodic(0.1)

simple_deployment("controlconverter_movement","raw_control_command_converter::Movement")
simple_deployment("controlconverter_position","raw_control_command_converter::Position")

simple_deployment("asv_detector", "asv_detector::Task").
    periodic(0.1)

simple_deployment("auv_rel_pos_controller", "auv_rel_pos_controller::Task").
    periodic(0.01)

simple_deployment("wall_servoing", "wall_servoing::SingleSonarServoing")

deployment "dual_wall_servoing" do
    task("sonar_feature_estimator_2", "sonar_feature_estimator::Task")
    task("dual_wall_servoing", "wall_servoing::DualSonarServoing")
end

deployment 'pingersearch' do
    task("angle_estimation", "pingersearch::AngleEstimation")
    task("pinger_search", "pingersearch::PingerSearch")
    add_default_logger
end
simple_deployment("audio_reader", "audio_reader::Task").
    periodic(0.05)

simple_deployment("sonar_feature_estimator", "sonar_feature_estimator::Task")
simple_deployment("taskmon_back", "taskmon::Task")

#simple_deployment "uwv_dynamic_model", "uwv_dynamic_model::Task" #baut nicht 09.08.2012
simple_deployment "uw_particle_localization", "uw_particle_localization::Task"
simple_deployment("auv_waypoint_navigator", "auv_waypoint_navigator::Task").
    periodic(0.01)
simple_deployment "battery_management", "battery_management::Task"
