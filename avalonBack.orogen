name "avalon_back"
version "0.1"

using_library "opencv" #otherwise linking will fail

#using_task_library "motion_estimation"
#using_task_library "ekf_slam"
#using_task_library "sonar_blueview"

using_task_library "auv_helper"
using_task_library "xsens_imu"
using_task_library "fog_kvh"
using_task_library 'orientation_estimator'
using_task_library 'pose_estimation'
using_task_library "sonar_tritech"
using_task_library "avalon_control"
using_task_library "depth_reader"
using_task_library "battery_watcher"

using_task_library "canbus"
using_task_library "hbridge"
using_task_library "controldev"
using_task_library "sysmon"
using_task_library "modem_can"
using_task_library "modemdriver"
using_task_library "raw_control_command_converter"

using_task_library "wall_servoing"
using_task_library "structure_servoing"
using_task_library "sonar_feature_estimator"
using_task_library "sonar_structure_servoing"
using_task_library "auv_rel_pos_controller"
using_task_library "rear_sonar_distance_estimator"
#using_task_library "uwv_dynamic_model" #baut nicht 09.08.2012
#using_task_library "battery_management"
using_task_library "uw_particle_localization"
using_task_library "sonar_feature_detector"
using_task_library "auv_waypoint_navigator"
using_task_library "wall_orientation_correction"
using_task_library "gps_helper"

using_task_library "taskmon"
using_task_library "auv_control"

using_task_library "line_scanner"
using_task_library "pipeline_inspection"

deployment 'avalon_back_base_control' do
    task("hbridge_reader", "hbridge::SensorReader").
	periodic(0.01).
        realtime.
        priority(90)
    task("hbridge_writer", "hbridge::CommandWriter").
	periodic(0.01).
        realtime.
        priority(90)
#    task("hbridge", "hbridge::Task").
#	periodic(0.001).
#        realtime.
#        priority(90)
    task("fake_rel_writer", "avalon_control::RelFakeWriter").
	periodic(0.1)
    task("fake_writer", "avalon_control::FakeWriter").
	periodic(0.1)
#
    task("depth","depth_reader::Task")
    task("depth_rear", "depth_reader::Task")
    task("depth_orientation_fusion","auv_helper::depth_and_orientation_fusion")

    task("can", "canbus::Task").
    	periodic(0.001).
	realtime.
	priority(92)
    
    task("can1", "canbus::Task").
    	periodic(0.001).
	realtime.
	priority(92)

    task("waypoint_navigator", "auv_control::WaypointNavigator")
    
    task("constant_command", "auv_control::ConstantCommand").
    periodic(0.01)
    task("constant_command_ground_follower", "auv_control::ConstantCommandGroundFollower").
    periodic(0.01)
    task("constant_command_ground_avoidance", "auv_control::ConstantCommandGroundAvoidance").
    periodic(0.01)
    
    task("constant_command_vel", "auv_control::ConstantCommand").
    periodic(0.01)
    
    task("constant_command_body", "auv_control::ConstantCommand").
    periodic(0.01)
    
    task("world_to_aligned", "auv_control::WorldToAligned")

    task("aligned_position_controller", "auv_control::PIDController")

    task("aligned_velocity_controller", "auv_control::PIDController")
    
    task("optimal_heading_controller", "auv_control::OptimalHeadingController")

    task("aligned_to_body", "auv_control::AlignedToBody")

    task("acceleration_controller", "auv_control::AccelerationController")

    task("position_control",    "avalon_control::PositionControlTask")
    task("motion_control",    "avalon_control::MotionControlTask")
    task("trajectory_follower",    "avalon_control::TrajectoryFollower")
    task("motion_feedback",   "avalon_control::MotionFeedbackTask")
    
#    task("force_torque_controller", "auv_control::ForceTorqueController")
#    task("aligned_velocity_controller", "auv_control::AlignedVelocityController")
#    task("aligned_controller", "auv_control::AlignedPositionController") #There is no AlignedController
#    task("world_controller", "auv_control::WorldController")
#    task("relative_controller", "auv_control::RelativeController")
    #task("motion_estimation", "motion_estimation::Task")
    task("sysmon","sysmon::Task")

    task "orientation_correction", "uw_particle_localization::OrientationCorrection"

    task("controlconverter_movement","raw_control_command_converter::Movement")
    task("controlconverter_position","raw_control_command_converter::Position")

    task("auv_rel_pos_controller", "auv_rel_pos_controller::Task").
        periodic(0.01)

    add_default_logger.
    	periodic(0.01)
end
    
simple_deployment("battery_watcher", "battery_watcher::Task")

simple_deployment("sonar_distance_estimator", "rear_sonar_distance_estimator::Task")
# simple_deployment("ekf_slam","ekf_slam::Task")

simple_deployment('orientation_estimator', 'orientation_estimator::BaseEstimator').
    realtime.
    priority(50)

#simple_deployment('ikf_orientation_estimator', 'orientation_estimator::IKFEstimator').
#    realtime.
#    priority(50)

simple_deployment('xsens','xsens_imu::Task').
    realtime.
    priority(75)

simple_deployment("fog","fog_kvh::Dsp3000Task").
    realtime.
    priority(75)

#simple_deployment("pipeline_tracker","pipline_tracker::Task")

#simple_deployment("sonar_profiling","sonar_tritech::Profiling")
simple_deployment("echosounder",          "sonar_tritech::Echosounder")
simple_deployment("sonar",          "sonar_tritech::Micron")
simple_deployment("sonar_rear",     "sonar_tritech::Micron")
#simple_deployment("sonar_profiling_micron",     "sonar_tritech::Micron")

# Never make it periodic, otherwise it does not work correctly
simple_deployment("controldev", "controldev::Remote")

simple_deployment("sysmon","sysmon::Task")
simple_deployment("modem","modem_can::Task").periodic(0.1)
simple_deployment("tritech_modem","modemdriver::ModemCanbus")

simple_deployment("map_to_gps","gps_helper::MapToGPS")

simple_deployment("wall_servoing", "wall_servoing::SingleSonarServoing")
simple_deployment("sonar_structure_servoing", "sonar_structure_servoing::Task")

deployment "dual_wall_servoing" do
    task("sonar_feature_estimator_2", "sonar_feature_estimator::Task")
    task("dual_wall_servoing", "wall_servoing::DualSonarServoing")
end

simple_deployment("sonar_feature_estimator", "sonar_feature_estimator::Task")
simple_deployment("taskmon_back", "taskmon::Task")

#simple_deployment "uwv_dynamic_model", "uwv_dynamic_model::Task" #baut nicht 09.08.2012
deployment "localization" do 
    task "uw_particle_localization", "uw_particle_localization::Task"
    
    task("auv_waypoint_navigator", "auv_waypoint_navigator::Task").
    periodic(0.01)

    task("motion_model","uw_particle_localization::MotionModel")
    
    task("sonar_feature_detector", "sonar_feature_detector::Task")

    add_default_logger
end

deployment "pipeline_laser_inspection" do

   task "line_scanner", "line_scanner::Task"

   task "inspection", "pipeline_inspection::Inspection"

   add_default_logger
end

deployment 'initialize_orientation_estimation' do

   task("initial_orientation_estimator", "orientation_estimator::BaseEstimator").
    realtime.
    priority(50)

   task "estimate_wall_orientation", "wall_orientation_correction::Task"

   add_default_logger
end

deployment 'ikf_orientation_estimation' do
   task("ikf_orientation_estimator", "orientation_estimator::IKF").
    realtime.
    priority(50)

   task("base_orientation_estimator", "orientation_estimator::BaseEstimator").
    realtime.
    priority(50)

   task "orientation_in_map", "wall_orientation_correction::OrientationInMap"

   add_default_logger
end

simple_deployment("pose_estimator", "pose_estimation::UWPoseEstimator").
    periodic(0.01)
